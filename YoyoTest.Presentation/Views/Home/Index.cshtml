@{
    ViewData["Title"] = "YoYo Test";
}
@model YoyoTest.Application.ViewModels.BeepTestViewModel

<section class="columns is-flex is-justify-content-center is-align-items-center m-5">
    <div class="column is-size-8-widescreen is-3-desktop is-4-tablet circle3 is-flex is-justify-content-center is-align-items-center">
        <div class="column is-11-widescreen is-11-desktop is-11-tablet circle2 is-flex is-justify-content-center is-align-items-center">
            <div data-pointer="true" class="start-timer column is-10-widescreen is-11-desktop is-10-tablet circle is-flex is-justify-content-center is-align-items-center">
            <i class="start-icon fas fa-play is-size-5-custom has-text-primary-dark"></i>
            <div class="is-hidden started-text is-flex is-justify-content-center is-align-items-center is-flex-direction-column">
                <div class="level-number has-text-info mb-2 is-size-5"></div>
                <div class="shuttle-number has-text-info mb-2 is-size-5"></div>
                <div class="speed-number has-text-black mb-2 is-size-5"></div>
            </div>
            <div class="is-hidden test-completed is-flex is-justify-content-center is-align-items-center is-flex-direction-column">
                <div class="has-text-danger is-size-5 has-text-weight-bold">Test</div>
                <div class="has-text-danger is-size-5 has-text-weight-bold">Completed</div>
            </div>
        </div>
        </div>
    </div>
</section>

<section>
    <div class="test-info columns is-mobile is-flex is-flex-direction-row is-justify-content-space-between mb-5">
        <div class="vertical-divider column is-flex is-justify-content-center is-flex-direction-column is-align-items-center">
            <div class="has-text-grey-light is-flex is-hidden-desktop is-hidden-tablet is-justify-content-center is-flex-direction-column is-align-items-center">
                <div> NEXT</div> <div>SHUTTLE</div>
            </div>
            <div class="has-text-grey-light is-flex is-hidden-mobile">
                <div> NEXT</div> <div class="ml-2">SHUTTLE</div>
            </div>
            <div id="shuttle" class="has-text-primary-dark is-size-1-2 whitespace-wrap">
                00:00 s
            </div>
        </div>
        <div class="vertical-divider column is-flex is-justify-content-center is-flex-direction-column is-align-items-center">
            <div class="has-text-grey-light is-flex is-hidden-desktop is-hidden-tablet is-justify-content-center is-flex-direction-column is-align-items-center">
                <div> TOTAL</div> <div>TIME</div>
            </div>
            <div class="has-text-grey-light is-flex is-hidden-mobile">
                <div> TOTAL</div> <div class="ml-2">TIME</div>
            </div>
            <div id="time" class="has-text-primary-dark is-size-1-2 whitespace-wrap">
                00:00 m
            </div>
        </div>
        <div class="column is-flex is-justify-content-center is-flex-direction-column is-align-items-center">
            <div class="has-text-grey-light is-flex is-hidden-desktop is-hidden-tablet is-justify-content-center is-flex-direction-column is-align-items-center">
                <div> TOTAL</div> <div>DISTANCE</div>
            </div>
            <div class="has-text-grey-light is-flex is-hidden-mobile">
                <div> TOTAL</div> <div class="ml-2">DISTANCE</div>
            </div>
            <div id="distance" class="has-text-primary-dark is-size-1-2 whitespace-wrap">
                0 m
            </div>
        </div>
    </div>
    <div class="is-hidden view-results is-mobile is-flex is-justify-content-center is-align-items-center mb-5">
        <span data-pointer="true" class="tag has-background-success-dark is-rounded has-text-weight-bold has-text-white	is-size-4 pl-6 pr-6 pt-3 pb-3">View Results</span>
    </div>
</section>

<section class="is-flex is-flex-direction-column mb-4">
    <div class="has-text-primary-dark has-text-weight-bold">
        Track
    </div>
    <div class="dropdown-divider has-background-grey-light"></div>
</section>

<section class="columns is-multiline is-tab" data-section="player-info">

    @foreach (var player in Model.Players)
    {
        <div class="column is-full-mobile is-half-tablet is-one-third-desktop">
            <div data-Id='@player.PlayerId' class="is-flex is-flex-direction-row is-justify-content-space-between">

                <div data-Id='@player.PlayerId' class="is-flex is-flex-direction-row">
                    <div class="has-text-info has-text-weight-bold mr-2">@player.PlayerId</div>
                    <div>@player.PlayerName</div>
                </div>

                <div data-Id='@player.PlayerId' class="is-flex is-hidden" data-buttons="stage">
                    <span data-pointer="true" class="warn-player tag is-info is-rounded">Warn</span>
                    <span data-pointer="true" class="stop-player tag is-danger is-rounded ml-2">Stop</span>
                </div>

                <div data-Id='@player.PlayerId' class="dropdown is-hidden" data-dropdown="score"></div>

            </div>
            <div class="dropdown-divider has-background-grey-lighter"></div>
        </div>
    }

</section>

<section class="is-flex is-flex-direction-column mb-4">
    <div class="dropdown-divider has-background-grey-light"></div>
</section>


<script>
    //Models
    let testData = @Html.Raw(Json.Serialize(@Model.BeepTestRatings));
    let playerData = @Html.Raw(Json.Serialize(@Model.Players));

    //global variables
    let interval = null;
    let shuttleCount = 0;
    let isTestStarted = false;
    let currentShuttleTime = 0;
    let progressSeconds = 0;
    let dropdownData = ["0-0"];

    //classes to modifiable elements in the dom
    const startIcon = "start-icon";
    const startedText = "started-text";
    const timer = "start-timer";
    const shuttleData = "shuttle";
    const totalTimeData = "time";
    const totalDistanceData = "distance";
    const levelInTimer = "level-number";
    const shuttleInTimer = "shuttle-number";
    const speedInTimer = "speed-number";
    const testCompleted = "test-completed";
    const testInfo = "test-info";
    const viewResults = "view-results";
    const circle3 = "circle3";

    //Data attributes
    const playerButtonsAttribuute = '[data-buttons="stage"]';

    //Class Reference
    const dropdown = ".dropdown";
    const dropdownItem = ".dropdown-item";
    const stopPlayer = ".stop-player";
    const warnPlayer = ".warn-player";

    //elements of above classes
    let startButton = document.getElementsByClassName(timer)[0];
    let nextShuttle = document.getElementById(shuttleData);
    let totalTime = document.getElementById(totalTimeData);
    let totalDistance = document.getElementById(totalDistanceData);
    let startIconElement = document.getElementsByClassName(startIcon);
    let startedTextElement = document.getElementsByClassName(startedText)[0];
    let levelInTimerElement = document.getElementsByClassName(levelInTimer)[0];
    let shuttleInTimerElement = document.getElementsByClassName(shuttleInTimer)[0];
    let speedInTimerElement = document.getElementsByClassName(speedInTimer)[0];
    let testCompletedElement = document.getElementsByClassName(testCompleted)[0];
    let testInfoElement = document.getElementsByClassName(testInfo)[0];
    let viewResultsElement = document.getElementsByClassName(viewResults)[0];
    let circle3Element = document.getElementsByClassName(circle3)[0];

    //List of elements
    let playerButtonsElement = document.querySelectorAll(playerButtonsAttribuute);
    let dropdownList = document.querySelectorAll(dropdown);
    let dropdownItemList = document.querySelectorAll(dropdownItem);
    let stopPlayerList = document.querySelectorAll(stopPlayer);
    let warnPlayerList = document.querySelectorAll(warnPlayer);

    //Utility Classes
    const active = "is-active";
    const hidden = "is-hidden";
    const greyedBg = "has-background-grey-light";

    //Text Changes
    const warned = "Warned"


    //handle dropdown open and close
    dropdownList.forEach(item => {
        item.addEventListener('click', event => {
            event.currentTarget.classList.toggle(active);
        })
    })

    dropdownList.forEach(item => {
        item.addEventListener('focusout', (event) => {
            event.currentTarget.classList.toggle(active);
        });
    });

    
    //handle player stop click
    warnPlayerList.forEach(item => {
        item.addEventListener('click', event => {
            //change colour and text of warn button
            event.currentTarget.classList.toggle(greyedBg);
            event.currentTarget.innerText = warned;
            //remove event and cursor
            event.currentTarget.style.cursor = 'none';
            event.currentTarget.style.pointerEvents = 'none';

            let id = event.currentTarget.parentElement.dataset.id;
            UpdatePlayerDataById(true, false, id, null)
        })
    });

    //On start icon button click
    startButton.addEventListener('click', event => {
        TestStarted();

        //display button when test is started
        playerButtonsElement.forEach(item => {
            item.classList.toggle(hidden);
        })

        const startTime = new Date().getTime(); //start time of the test
        interval = setInterval(function () { UpdateSecondData(startTime) }, 1000);
    });

    //handle player warning click
    stopPlayerList.forEach(item => {
        item.addEventListener('click', event => {
            PrepareDropdownAndHideButtons(event);

            //check if its the last player that is active
            let playerInfoElements = Array.from(playerButtonsElement);
            let deactivatedPlayers = playerInfoElements.filter(elem => elem.className.includes(hidden));

            //clear interval and modify cirlce
            if (deactivatedPlayers.length === playerInfoElements.length) {
                TestCompleted();
            }

            let id = event.currentTarget.parentElement.dataset.id;
            UpdatePlayerDataById(false, true, id, null)
        });
    });

    function PrepareDropdownAndHideButtons(event) {
        //hide buttons
        event.currentTarget.parentElement.classList.toggle(hidden);
        //show dropdown
        let currentDropdown = event.currentTarget.parentElement.parentElement.querySelector(dropdown);

        let newDropdownData = [...dropdownData];
        newDropdownData.reverse();

        let dropdownContent = `<div class="dropdown-trigger">
                        <button class="button is-shadowless" aria-haspopup="true" aria-controls="dropdown-menu3">
                            <span>${newDropdownData[0]}</span>
                            <span class="icon is-small">
                                <i class="fas fa-angle-down" aria-hidden="true"></i>
                            </span>
                        </button>
                    </div>
                    <div class="dropdown-menu" role="menu">
                        <div class="dropdown-content">`;

        for (item of newDropdownData) {
            dropdownContent += `<a href="#" onmousedown="UpdatePlayerData(this,'${item}')" class="dropdown-item">${item}</a>`;
        }

        dropdownContent += `</div></div>`;

        currentDropdown.innerHTML = dropdownContent;
        currentDropdown.classList.toggle(hidden);
    }


    //can be used for ajax call for updating the data in the db
    function UpdatePlayerData(element, levelInfo) {
        let id = element.parentElement.parentElement.parentElement.dataset.id;
        UpdatePlayerDataById(false, true, id, levelInfo)
    }

    function UpdatePlayerDataById(isWarn, isStop, Id, levelInfo) {
        let playerIndex = playerData.findIndex(x => x.playerId == Id);

        if (isWarn) {
            playerData[playerIndex].isWarned = true;
        }
        if (isStop) {
            let levelData = levelInfo == null ? dropdownData[dropdownData.length - 1].split('-') : levelInfo.split('-');
            let level = parseInt(levelData[0]);
            let shuttle = parseInt(levelData[1]);
            playerData[playerIndex].speedLevel = level;
            playerData[playerIndex].shuttleNo = shuttle;
            playerData[playerIndex].isStopped = true;
        }
    }

    function UpdateSecondData(startTime) {
        if (!isTestStarted) {
            SetShuttleData();
            isTestStarted = true;
        }

        let presentTime = new Date().getTime();

        //set total time
        let totalCalculatedTime = presentTime - startTime;
        let totalMinutes = Math.floor((totalCalculatedTime % (1000 * 60 * 60)) / (1000 * 60));
        let totalSeconds = Math.floor((totalCalculatedTime % (1000 * 60)) / 1000);

        let totalDisplayMinutes = totalMinutes < 10 ? `0${totalMinutes}` : totalMinutes;
        let totalDisplaySeconds = totalSeconds < 10 ? `0${totalSeconds}` : totalSeconds;
        let totalDisplayTime = `${totalDisplayMinutes}:${totalDisplaySeconds}`;

        totalTime.innerText = `${totalDisplayTime} m`;

        UpdateShuttleData(totalDisplayTime);
    }

    function UpdateShuttleData(currentTime) {
        let nextShuttleStartTime = null;
        let shuttleTotalTime = testData[shuttleCount].levelTime;

        //check end of test
        if (shuttleCount + 1 === testData.length)
            nextShuttleStartTime = testData[shuttleCount].commulativeTime;
        else
            nextShuttleStartTime = testData[shuttleCount + 1].startTime;

        if (currentTime === nextShuttleStartTime) {
            if (shuttleCount + 1 === testData.length) { //check if its the last shuttle end the test
                TestCompleted();
                return;
            }
            ++shuttleCount;
            SetShuttleData();
        }

        // only update ui if a shuttle is in progress 
        if (currentShuttleTime != 0) {
            let updatedCurrentShuttleTime = --currentShuttleTime;
            let totalShuttleDisplaySeconds = currentShuttleTime < 10 ? `0${updatedCurrentShuttleTime}` : updatedCurrentShuttleTime;
            nextShuttle.innerText = `00:${totalShuttleDisplaySeconds} s`;

            //update progress bar
            const progress = (++progressSeconds / shuttleTotalTime) * 360;
            circle3Element.style.background = `conic-gradient(#e25555 1deg ${progress}deg, #ffffff ${progress + 1}deg)`;
        }
        else {
            //prepare dropdown after level finishes
            let content = `${testData[shuttleCount].speedLevel}-${testData[shuttleCount].shuttleNo}`;
            dropdownData.includes(content) ? null : dropdownData.push(content);

            progressSeconds = 0;
            //circle3Element.style.background = `none`;
            totalDistance.innerText = testData[shuttleCount].accumulatedShuttleDistance + ' m';
        }
    }

    function SetShuttleData() {
        currentShuttleTime = testData[shuttleCount].levelTime;
        levelInTimerElement.innerText = 'Level ' + testData[shuttleCount].speedLevel;
        shuttleInTimerElement.innerText = 'Shuttle ' + testData[shuttleCount].shuttleNo;
        speedInTimerElement.innerText = testData[shuttleCount].speed + ' km/h';
    }

    //toggle timer text and icon visibility
    function TestStarted() {
        startIconElement[0].classList.toggle(hidden);
        startedTextElement.classList.toggle(hidden);
        startButton.style.cursor = 'none';
        startButton.style.pointerEvents = 'none';
    }

    //ui changes when test is completed
    function TestCompleted() {
        clearInterval(interval);
        circle3Element.style.background = `none`;
        startedTextElement.classList.toggle(hidden);
        testCompletedElement.classList.toggle(hidden);
        testInfoElement.classList.toggle(hidden);
        viewResultsElement.classList.toggle(hidden);
    }
</script>
